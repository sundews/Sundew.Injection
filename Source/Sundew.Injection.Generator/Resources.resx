<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResolveRequiredParameterErrorDescription" xml:space="preserve">
    <value>Occurs when a required parameter cannot be resolved</value>
  </data>
  <data name="ResolveRequiredParameterErrorMessageFormat" xml:space="preserve">
    <value>Could not Resolve the type: {0} as a parameter for: {1} from the available parameter sources: {2}</value>
  </data>
  <data name="ResolveRequiredParameterErrorTitle" xml:space="preserve">
    <value>Could not Resolve required parameter</value>
  </data>
  <data name="ResolveTypeErrorDescription" xml:space="preserve">
    <value>Occurs when type could not be resolved</value>
  </data>
  <data name="ResolveTypeErrorMessageFormat" xml:space="preserve">
    <value>Failed to Resolve the type: {0}</value>
  </data>
  <data name="ResolveTypeErrorTitle" xml:space="preserve">
    <value>Could not Resolve type</value>
  </data>
  <data name="UnsupportedInstanceMethodErrorDescription" xml:space="preserve">
    <value>Occurs when an factory instance method is not supported</value>
  </data>
  <data name="UnsupportedInstanceMethodErrorMessageFormat" xml:space="preserve">
    <value>The instance method: {0} is not supported on the type: {1} for injecting into: {2}</value>
  </data>
  <data name="UnsupportedInstanceMethodErrorTitle" xml:space="preserve">
    <value>Unsupported instance method.</value>
  </data>
  <data name="ResolveMethodDescription" xml:space="preserve">
    <value>Occurs when failing to resolves a method and its parameters</value>
  </data>
  <data name="ResolveMethodMessageFormat" xml:space="preserve">
    <value>Could not Resolve the following parameters for type: {0} - parameters: {1}</value>
  </data>
  <data name="ResolveMethodErrorTitle" xml:space="preserve">
    <value>Method could not be resolved</value>
  </data>
  <data name="ResolveGenericMethodDescription" xml:space="preserve">
    <value>Occurs when failing to resolves a generic method and its parameters</value>
  </data>
  <data name="ResolveGenericMethodMessageFormat" xml:space="preserve">
    <value>Could not Resolve the following parameters for type: {0} - parameters: {1}</value>
  </data>
  <data name="ResolveGenericMethodErrorTitle" xml:space="preserve">
    <value>Generic method could not be resolved</value>
  </data>
  <data name="ScopeErrorDescription" xml:space="preserve">
    <value>Occurs when a type is registered with an invalid lifetime scope </value>
  </data>
  <data name="ScopeErrorMessageFormat" xml:space="preserve">
    <value>The type: {0} with scope: {1} is invalid due to the parent: {2} with scope: {3}</value>
  </data>
  <data name="ScopeErrorTitle" xml:space="preserve">
    <value>Invalid lifetime scope</value>
  </data>
  <data name="UnknownErrorDescription" xml:space="preserve">
    <value>Used when an unknown error occurs</value>
  </data>
  <data name="UnknownErrorMessageFormat" xml:space="preserve">
    <value>Unknown error: {0}</value>
  </data>
  <data name="UnknownErrorTitle" xml:space="preserve">
    <value>Unknown error occured in Sundew.Injection.Generator</value>
  </data>
  <data name="NoViableConstructorFoundErrorDescription" xml:space="preserve">
    <value>Types without a viable constructor are not supported</value>
  </data>
  <data name="NoViableConstructorFoundErrorMessageFormat" xml:space="preserve">
    <value>The type {0} did not contain a viable constructor</value>
  </data>
  <data name="NoViableConstructorFoundErrorTitle" xml:space="preserve">
    <value>No viable constructor could be found</value>
  </data>
  <data name="OnlyGenericTypeSupportedErrorDescription" xml:space="preserve">
    <value>Only generic types are supported</value>
  </data>
  <data name="OnlyGenericTypeSupportedErrorMessageFormat" xml:space="preserve">
    <value>The type {0} is not a generic type</value>
  </data>
  <data name="OnlyGenericTypeSupportedErrorTitle" xml:space="preserve">
    <value>Type must be generic.</value>
  </data>
  <data name="TypeNotInstantiableErrorDescription" xml:space="preserve">
    <value>The type is either an abstract classes or a string, which cannot be instantiated</value>
  </data>
  <data name="TypeNotInstantiableErrorMessageFormat" xml:space="preserve">
    <value>The type {0} cannot be instantiated</value>
  </data>
  <data name="TypeNotInstantiableErrorTitle" xml:space="preserve">
    <value>Type must be instantiable</value>
  </data>
  <data name="RequiredTypeNotFoundErrorDescription" xml:space="preserve">
    <value>Some types are required for the code generator, when not found in the compilation, this error is reported</value>
  </data>
  <data name="RequiredTypeNotFoundErrorMessageFormat" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="RequiredTypeNotFoundErrorTitle" xml:space="preserve">
    <value>A required type was not found in the compilation</value>
  </data>
  <data name="MultipleParametersNotSupportedForBindFactoryErrorDescription" xml:space="preserve">
    <value />
  </data>
  <data name="MultipleParametersNotSupportedForBindFactoryErrorMessageFormat" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="MultipleParametersNotSupportedForBindFactoryErrorTitle" xml:space="preserve">
    <value>ICreate</value>
  </data>
  <data name="NoBindingFoundForNonConstructableTypeErrorDescription" xml:space="preserve">
    <value>Occurs when there is no way to construct a type, either by missing a binding, the type not having a constructor or being abstract/interface</value>
  </data>
  <data name="NoBindingFoundForNonConstructableTypeErrorMessageFormat" xml:space="preserve">
    <value>Binding not found for type {0} and type is not constructable</value>
  </data>
  <data name="NoBindingFoundForNonConstructableTypeErrorTitle" xml:space="preserve">
    <value>Binding not found</value>
  </data>
  <data name="NoFactoryMethodFoundForTypeErrorDescription" xml:space="preserve">
    <value>Occurs when a binding does not specify a factory method or constructor and no constructor could be resovled automatically</value>
  </data>
  <data name="NoFactoryMethodFoundForTypeErrorMessageFormat" xml:space="preserve">
    <value>Could not Resolve factory method for type {0}</value>
  </data>
  <data name="NoFactoryMethodFoundForTypeErrorTitle" xml:space="preserve">
    <value>No factory method was found to instanciate type</value>
  </data>
</root>